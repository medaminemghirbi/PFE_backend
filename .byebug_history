continue
params
continue
params
continue
params
continue
params
continue
params[:token][:email]
continue
params[:token][:email]
params
continue
params[:token][:card][:name]
params[:name]
params[:token][:name]
params[:token].name
params[:token]
params
params[:token][:name]
continue
params[:name]
continue
params
continue
params
params[:email]
continue
params
continue
params[:amount]
params
continue
params
continue
Mission.where("id = ?" ,  @request.mission_id ).status
Mission.where("id = ?" ,  @request.mission_id )
continue
@request.status
@request
continue
params
continue
params
continue
@requestfreelancer[:freelancer_id]
@requestfreelancer
continue
post_params2[:status]
post_params2.status
post_params2
post_params
continue
@mission.freelancer_id
@mission.freelancer_id.present?
continue
 @mission.freelancer_id.nil?
continue
@mission.freelancer_id
@mission
@mission.freelancer_id
continue
@mission
continue
@mission
continue
@mission
continue
 Mission.where("id = ?" ,  @request.mission_id )
continue
Mission.where("id = ?" ,  @request.mission_id ).where(:freelancer_id.present?)
continue
@request.status
continue
@request.status
@request
continue
missionx
continue
missionx.freelancer_id
continue
params[:status]
post_params2.status
post_params2
continue
Request.find(60).mission.where(status: "accepted").count
Request.find(60).missions.where(status: "accepted").count
post_params2
params
Request.find(params[:id]).missions.where(status: "accepted").count
continue
params[:status]
continue
params
parms
continue
params
continue
params
@params
continue
 User.find_by_email(params[:email].present?)
params
continue
params
@params
continue
params
continue
User.find_by_email(params[:email])
params
@params
continue
params
continue
params
continue
params
@params
continue
params
continue
@params
params
User.find_by_email(params["client21@gmail.com"])
User.find_by_email(params[:email])
user
continue
post_paramsFreelancer
@params
continue
params
@user
continue
Request.where(mission_id: @mission.ids  )
continue
@mission
continue
@mission.ids
mission.ids
Request.where(mission_id: @mission.ids  ).where("status = ?" , status = 1 )
@mission
continue
 @mission_languages.flat_map{|ml| ml.mission if ids.uniq.to_s.include?(ml.mission.languages.pluck(:id).to_s) && ml.mission !=nil}
@mission_languages.flat_map{|ml| ml.mission if ml.mission.languages.where(id: ids.uniq)}
@mission_languages.flat_map{|ml| ml.mission if ids.uniq ==ml.mission.languages.pluck(:id)}.pluck(&:id)
@mission_languages.flat_map{|ml| ml.mission if ids.uniq ==ml.mission.languages.pluck(:id)}
@mission_languages.flat_map{|ml| ml.mission if ids.uniq.to_s.include?(ml.mission.languages.pluck(:id).to_s)}
ids.uniq
Mission.all.limit(2).flat_map(&:languages).pluck(:id)
Mission.all.limit!(2).languages.pluck(:id)
Mission.all.limits(2).languages.pluck(:id)
Mission.all.limit(2).languages.pluck(:id)
params
@mission_languages.flat_map{|ml| ml.mission if ml.mission.languages.pluck(:id).to_s.include?( ids.uniq.to_s)}
@missions
@missions.collect(&:id)
@missions.map(&:id)
@missions.map(:id)
@missions.collect(:id)
@missions.distinct.class
@missions
@missions.class
@missions.pluck(:id)
Mission.where(id: @missions.pluck(:id).uniq).flat_map(&:languages)
@missions.map(&:languages)
@missions.flat_map(&:languages)
@missions.flat_map(&:language)
@missions.flat_map(&:languages)
@missions.flat_map(&languages)
@missions
continue
@mission_languages.flat_map{|ml| ml.mission if ml.mission.languages.pluck(:id) == ids.uniq}
continue
@mission_languages.flat_map{|ml| ml.mission if ml.mission.languages.pluck(:id) == ids.uniq}
continue
ids.uniq
ids
@mission_languages.first.mission.languages.pluck(:id)
@mission_languages.first.mission.languages
@mission_languages.first.mission.language
@mission_languages.first.language
@mission_languages.first.languages
@mission_languages.first.language_id
continue
@mission_languages.second.language_id
@mission_languages.first.language_id
@mission_languages.flat_map{|ml| ml.mission if ml.language_id.include?(ids)
continue
ids
continue
ids
params.permit!
@params
continue
ids.uniq
@missions
ids
continue
ids
params.permit!
continue
params.permit!
continue
params.permit
continue
params.permit!
continue
params.permit!
continue
params.permit!
@missions
continue
@missions.join(:requests).where(status:  "accepted")
@missions
continue
@missions.join(:requests).where(:requests =>{:status =>"accepted"})
@missions
@mission
continue
Mission.where("id = ?" ,  @request.mission_id ).update(freelancer_id: @request.freelancer_id)
continue
@request
continue
@request
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params[:language_id]
continue
params[:language_id].split(",").to_i
params[:language_id].split(",")
params[:language_id]
params[:language_id].split(",")
params[:language_id].split(,)
params[:language_id]
continue
post_params
continue
post_params
continue
@users
continue
@user
continue
Client.all
continue
